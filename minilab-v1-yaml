AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template WordPress_Single_Instance: WordPress is web
  software you can use to create a beautiful website or blog. This template
  installs WordPress with a local MySQL database for storage. It demonstrates
  using the AWS CloudFormation bootstrap scripts to deploy WordPress.
  **WARNING** This template creates an Amazon EC2 instance. You will be billed
  for the AWS resources used if you create a stack from this template.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  DBName:
    Default: wordpressdb
    Description: The WordPress database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    NoEcho: 'true'
    Description: The WordPress database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: The WordPress database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBRootPassword:
    NoEcho: 'true'
    Description: MySQL root password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
Mappings:
  AWSInstanceType2Arch:
    c1.medium:
      Arch: HVM64
    c1.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    m1.large:
      Arch: HVM64
    m1.medium:
      Arch: HVM64
    m1.small:
      Arch: HVM64
    m1.xlarge:
      Arch: HVM64
    m2.2xlarge:
      Arch: HVM64
    m2.4xlarge:
      Arch: HVM64
    m2.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    t1.micro:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.small:
      Arch: HVM64
  AWSInstanceType2NATArch:
    c1.medium:
      Arch: NATHVM64
    c1.xlarge:
      Arch: NATHVM64
    c3.2xlarge:
      Arch: NATHVM64
    c3.4xlarge:
      Arch: NATHVM64
    c3.8xlarge:
      Arch: NATHVM64
    c3.large:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c4.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    cc2.8xlarge:
      Arch: NATHVM64
    cr1.8xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
    d2.4xlarge:
      Arch: NATHVM64
    d2.8xlarge:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    g2.2xlarge:
      Arch: NATHVMG2
    g2.8xlarge:
      Arch: NATHVMG2
    hi1.4xlarge:
      Arch: NATHVM64
    hs1.8xlarge:
      Arch: NATHVM64
    i2.2xlarge:
      Arch: NATHVM64
    i2.4xlarge:
      Arch: NATHVM64
    i2.8xlarge:
      Arch: NATHVM64
    i2.xlarge:
      Arch: NATHVM64
    m1.large:
      Arch: NATHVM64
    m1.medium:
      Arch: NATHVM64
    m1.small:
      Arch: NATHVM64
    m1.xlarge:
      Arch: NATHVM64
    m2.2xlarge:
      Arch: NATHVM64
    m2.4xlarge:
      Arch: NATHVM64
    m2.xlarge:
      Arch: NATHVM64
    m3.2xlarge:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m3.medium:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    m4.4xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    t1.micro:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    af-south-1:
      HVM64: ami-0412806bd0f2cf75f
      HVMG2: NOT_SUPPORTED
    ap-east-1:
      HVM64: ami-0e0a21f8bd5195698
      HVMG2: NOT_SUPPORTED
    ap-northeast-1:
      HVM64: ami-0c3e3e7af817ad732
      HVMG2: NOT_SUPPORTED
    ap-northeast-2:
      HVM64: ami-0f8dbbf156e3a5cc6
      HVMG2: NOT_SUPPORTED
    ap-northeast-3:
      HVM64: ami-02a371c41f08cc499
      HVMG2: NOT_SUPPORTED
    ap-south-1:
      HVM64: ami-0f4ab3c8db917e421
      HVMG2: NOT_SUPPORTED
    ap-south-2:
      HVM64: ami-008b9c53bb1dcd29c
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      HVM64: ami-0c3189395e5b39df7
      HVMG2: NOT_SUPPORTED
    ap-southeast-2:
      HVM64: ami-040d698318c0b1575
      HVMG2: NOT_SUPPORTED
    ap-southeast-3:
      HVM64: ami-065dcca47dde26602
      HVMG2: NOT_SUPPORTED
    ap-southeast-4:
      HVM64: ami-043e25432cf94e107
      HVMG2: NOT_SUPPORTED
    il-central-1:
      HVM64: ami-0054be7d7d9d65a1d
      HVMG2: NOT_SUPPORTED
    ca-central-1:
      HVM64: ami-05f40104305a2cdf7
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      HVM64: ami-03f1e08d409b1e5fd
      HVMG2: NOT_SUPPORTED
    cn-northwest-1:
      HVM64: ami-00093746b9a0e272a
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-0f454ec961da9a046
      HVMG2: NOT_SUPPORTED
    eu-north-1:
      HVM64: ami-0e78cd18c67fcf512
      HVMG2: NOT_SUPPORTED
    eu-south-1:
      HVM64: ami-07d048788725b9602
      HVMG2: NOT_SUPPORTED
    eu-west-1:
      HVM64: ami-0db5ca3e5748fb7e2
      HVMG2: NOT_SUPPORTED
    eu-west-2:
      HVM64: ami-07baf6b15b7387f24
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      HVM64: ami-05a13fbd8aa57eedc
      HVMG2: NOT_SUPPORTED
    me-south-1:
      HVM64: ami-0007de3fdcaba7e44
      HVMG2: NOT_SUPPORTED
    me-central-1:
      HVM64: ami-06ce88defa3fc74ed
      HVMG2: NOT_SUPPORTED
    eu-south-2:
      HVM64: ami-051306f4e885d6de4
      HVMG2: NOT_SUPPORTED
    eu-central-2:
      HVM64: ami-0fcd532574732cb0f
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      HVM64: ami-07f6e9fce0e888425
      HVMG2: NOT_SUPPORTED
    us-east-1:
      HVM64: ami-01989ebfd388ea377
      HVMG2: NOT_SUPPORTED
    us-east-2:
      HVM64: ami-0de69dde1945155da
      HVMG2: NOT_SUPPORTED
    us-west-1:
      HVM64: ami-08fe20a82dcaa1c92
      HVMG2: NOT_SUPPORTED
    us-west-2:
      HVM64: ami-05848d23360f5edfe
      HVMG2: NOT_SUPPORTED
Resources:
 # Create VPC, with CIDR value 16  so that enough IP's available
  MyLabVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:  !Join ['', [!Ref "AWS::StackName", "-MyLabVPC" ]]
   # Create Internet Gateway
  MyLabIGW:
    Type: AWS::EC2::InternetGateway
    DependsOn: MyLabVPC
    Properties:
      Tags:
        - Key: Name
          Value: MyLabIGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref MyLabVPC
      InternetGatewayId: !Ref MyLabIGW
  # Public Subnet -1
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyLabVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: 
        'Fn::Select': 
          - 0
          - 'Fn::GetAZs': ''
      MapPublicIpOnLaunch: true  # Ensures that instances receive a public IP
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Public-A"
   # Public Subnet -2
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyLabVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: 
        'Fn::Select': 
          - 0
          - 'Fn::GetAZs': ''
      MapPublicIpOnLaunch: true  # Ensures that instances receive a public IP
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Public-B"
   # Private Subnet -1
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyLabVPC
      CidrBlock: 10.0.50.0/24
      AvailabilityZone: 
        'Fn::Select': 
          - 0
          - 'Fn::GetAZs': ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Private-A"
    # Private Subnet -2
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyLabVPC
      CidrBlock: 10.0.60.0/24
      AvailabilityZone: 
        'Fn::Select': 
          - 0
          - 'Fn::GetAZs': ''
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Private-B"
  # Public Routing Table:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyLabVPC
      Tags:
      - Key: Name
        Value: PublicRouteTable
  PublicRoute:   # Public route table is routing directly to IGW, Creating only 1 as we are on single AZ
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyLabIGW 
  # Creating a NAT Gateway
  MyNAT:
   Type: AWS::EC2::NatGateway
   Properties:
     AllocationId: !GetAtt ElasticIPAddress.AllocationId
     SubnetId: !Ref PublicSubnetA
     Tags:
     - Key: Name
       Value: !Sub MyNAT-${AWS::StackName}
  ElasticIPAddress:
   Type: AWS::EC2::EIP
   Properties:
     Domain: MyLabVPC
  # Private Routing Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyLabVPC
      Tags:
      - Key: Name
        Value: PrivateRouteTable
  PrivateRoute:   # Private route table , Creating only 1 as we are on single AZ
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref MyNAT
  # Attaching Private and Public Subnets respectively to Private and Public Routing Tables  
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
  
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable HTTP access via port 80 + SSH access"
      VpcId: !Ref MyLabVPC
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: !Ref SSHLocation
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      Tags:
        - Key: Name
          Value: WebServerSecurityGroup
  WebServer:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          wordpress_install:
            - install_cfn
            - install_wordpress
            - configure_wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - |
                    path=Resources.WebServer.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource WebServer '
                  - '         --configsets wordpress_install '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_wordpress:
          packages:
            yum:
              php73: []
              php73-mysqlnd: []
              mysql57: []
              mysql57-server: []
              mysql57-devel: []
              mysql57-libs: []
              httpd24: []
          sources:
            /var/www/html: 'http://wordpress.org/latest.tar.gz'
          files:
            /tmp/setup.mysql:
              content: !Join 
                - ''
                - - 'CREATE DATABASE '
                  - !Ref DBName
                  - |
                    ;
                  - CREATE USER '
                  - !Ref DBUser
                  - '''@''localhost'' IDENTIFIED BY '''
                  - !Ref DBPassword
                  - |
                    ';
                  - 'GRANT ALL ON '
                  - !Ref DBName
                  - .* TO '
                  - !Ref DBUser
                  - |
                    '@'localhost';
                  - |
                    FLUSH PRIVILEGES;
              mode: '000400'
              owner: root
              group: root
            /tmp/create-wp-config:
              content: !Join 
                - ''
                - - |
                    #!/bin/bash -xe
                  - >
                    cp /var/www/html/wordpress/wp-config-sample.php
                    /var/www/html/wordpress/wp-config.php
                  - sed -i "s/'database_name_here'/'
                  - !Ref DBName
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'username_here'/'
                  - !Ref DBUser
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'password_here'/'
                  - !Ref DBPassword
                  - |
                    '/g" wp-config.php
              mode: '000500'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              mysqld:
                enabled: 'true'
                ensureRunning: 'true'
        configure_wordpress:
          commands:
            01_set_mysql_root_password:
              command: !Join 
                - ''
                - - mysqladmin -u root password '
                  - !Ref DBRootPassword
                  - ''''
              test: !Join 
                - ''
                - - '$(mysql '
                  - !Ref DBName
                  - ' -u root --password='''
                  - !Ref DBRootPassword
                  - ''' >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
            02_create_database:
              command: !Join 
                - ''
                - - mysql -u root --password='
                  - !Ref DBRootPassword
                  - ''' < /tmp/setup.mysql'
              test: !Join 
                - ''
                - - '$(mysql '
                  - !Ref DBName
                  - ' -u root --password='''
                  - !Ref DBRootPassword
                  - ''' >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
            03_configure_wordpress:
              command: /tmp/create-wp-config
              cwd: /var/www/html/wordpress
    Properties:
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PublicSubnetA
      SecurityGroupIds:
         - !GetAtt WebServerSecurityGroup.GroupId
      KeyName: !Ref KeyName
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServer '
            - '         --configsets wordpress_install '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServer '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M              
Outputs:
  WebsiteURL:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebServer
          - PublicDnsName
        - /wordpress
    Description: WordPress Website
