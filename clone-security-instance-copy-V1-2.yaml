AWSTemplateFormatVersion: '2010-09-09'
Description: 'Security Group and Basic Instance creation in Public2 Subnet'

Parameters:

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  UserConfig:
    Type: String
    Description: "Configuration string from the network stack"
  
  VPCID:
    Type: String
    Description: "The ID of the VPC created in the network stack."
  
  PublicRouteTableAZ1Id:
    Type: String
    Description: " Enter The ID of Public Route Table AZ1 created in the network stack."

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2  
  
  DBName:
    Default: wordpressdb
    Description: The WordPress database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    NoEcho: 'true'
    Description: The WordPress database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: "must begin with a letter and contain only alphanumeric characters."
  DBPassword:
    NoEcho: 'true'
    Description: The WordPress database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBRootPassword:
    NoEcho: 'true'
    Description: MySQL root password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: "must contain only alphanumeric characters."

#Conditions:
#  CreateTwoAdditionalSGs: !Equals [!Ref UserConfig, "AZ2P1P1"]
#  CreateFourAdditionalSGs: !Equals [!Ref UserConfig, "AZ2P2P2"]
Conditions:
  CreateTwoAdditionalSGs: 
    !Equals [!Ref UserConfig, "AZ2P1P1"]
  CreateFourAdditionalSGs: 
    !Equals [!Ref UserConfig, "AZ2P2P2"]

Resources:
  AZ1Public1SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for Public Subnet 1 - Jump Server"
      VpcId: !Ref VPCID
      # No SSH ingress rule needed
      Tags:
        - Key: Name
          Value:  !Join ['', [!Ref "AWS::StackName", "-AZ1Public1SG" ]]

  AZ1Public2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for Public Subnet 2 - Isolated Server"
      VpcId: !Ref VPCID
     # Currently no specific ingress and egress rules as needed
      Tags:
        - Key: Name
          Value:  !Join ['', [!Ref "AWS::StackName", "-AZ1Public2SG" ]]

  AZ1Private1SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for Private Subnet 1 - Database"
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value:  !Join ['', [!Ref "AWS::StackName", "-AZ1Private1SG" ]] 

  AZ1Private2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for Private Subnet 2 - Backend Services"
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value:  !Join ['', [!Ref "AWS::StackName", "-AZ1Private2SG" ]]
# Ingress rules AZ1======================================================================================
# Ingress rules for AZ1Private1SG
  AZ1Private1SGIngress22FromAZ1Public1SG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AZ1Private1SG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref AZ1Public1SG

  AZ1Private1SGIngress22FromAZ1Private2SG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AZ1Private1SG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref AZ1Private2SG

  AZ1Private1SGIngress3306FromAZ1Private2SG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AZ1Private1SG
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref AZ1Private2SG

  # Ingress rules for AZ1Private2SG
  AZ1Private2SGIngress22FromAZ1Public1SG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AZ1Private2SG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref AZ1Public1SG

  AZ1Private2SGIngress22FromAZ1Private1SG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AZ1Private2SG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref AZ1Private1SG

  AZ1Private2SGIngress3306FromAZ1Private1SG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AZ1Private2SG
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref AZ1Private1SG
# Conditional security groups for AZ2

  AZ2Private1SG:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateTwoAdditionalSGs
    Properties:
      GroupDescription: "Security group for Private Subnet 1 - Database"
      VpcId: !Ref VPCID

  AZ2Private2SG:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateFourAdditionalSGs
    Properties:
      GroupDescription: "Security group for Private Subnet 2 - Backend Services"
      VpcId: !Ref VPCID

  AZ2Public1SG:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateTwoAdditionalSGs
    Properties:
      GroupDescription: "Security group for Public Subnet 1 - Jump Server"
      VpcId: !Ref VPCID   
      # No SSH ingress rule needed
      Tags:
        - Key: Name
          Value:  !Join ['', [!Ref "AWS::StackName", "-AZ2Public1SG" ]]

  AZ2Public2SG:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateFourAdditionalSGs
    Properties:
      GroupDescription: "Security group for Public Subnet 2 - Isolated Server"
      VpcId: !Ref VPCID
      # Currently no specific ingress and egress rules as needed
      Tags:
        - Key: Name
          Value:  !Join ['', [!Ref "AWS::StackName", "-AZ2Public2SG" ]]

# Ingress rules AZ2======================================================================================
# Ingress rules for AZ2Private1SG
  AZ2Private1SGIngress22FromAZ2Public1SG:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateFourAdditionalSGs
    Properties:
      GroupId: !Ref AZ2Private1SG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref AZ2Public1SG

  AZ2Private1SGIngress22FromAZ2Private2SG:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateFourAdditionalSGs
    Properties:
      GroupId: !Ref AZ2Private1SG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref AZ2Private2SG

  AZ2Private1SGIngress3306FromAZ2Private2SG:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateFourAdditionalSGs
    Properties:
      GroupId: !Ref AZ2Private1SG
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref AZ2Private2SG
  # Ingress rules for AZ2Private2SG 
  AZ2Private2SGIngress22FromAZ2Public1SG:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateFourAdditionalSGs
    Properties:
      GroupId: !Ref AZ2Private2SG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref AZ2Public1SG

  AZ2Private2SGIngress22FromAZ2Private1SG:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateFourAdditionalSGs
    Properties:
      GroupId: !Ref AZ2Private2SG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref AZ2Private1SG

  AZ2Private2SGIngress3306FromAZ2Private1SG:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateFourAdditionalSGs
    Properties:
      GroupId: !Ref AZ2Private2SG
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref AZ2Private1SG

##########################################################################

  PublicAdminSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCID
      CidrBlock: 10.0.50.0/24
      MapPublicIpOnLaunch: true  # Ensures that instances receive a public IP
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicAdminSubnet"
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicAdminSubnet
      RouteTableId: !Ref PublicRouteTableAZ1Id

  AdminServerGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable HTTP access via port 80 + SSH access"
      VpcId: !Ref VPCID
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: !Ref SSHLocation
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-AdminServerGroup"

 #Basic Server instance creating for this lab is a wordpress server, the same Instance's AMI ID will be used to create the DB
  WebServer:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          wordpress_install:
            - install_cfn
            - install_wordpress
            - configure_wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - |
                    path=Resources.WebServer.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource WebServer '
                  - '         --configsets wordpress_install '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_wordpress:
          sources:
            /var/www/html: 'http://wordpress.org/latest.tar.gz'
          files:
            /tmp/setup.mysql:
              content: !Join 
                - ''
                - - 'CREATE DATABASE '
                  - !Ref DBName
                  - |
                    ;
                  - CREATE USER '
                  - !Ref DBUser
                  - '''@''localhost'' IDENTIFIED BY '''
                  - !Ref DBPassword
                  - |
                    ';
                  - 'GRANT ALL ON '
                  - !Ref DBName
                  - .* TO '
                  - !Ref DBUser
                  - |
                    '@'localhost';
                  - |
                    FLUSH PRIVILEGES;
              mode: '000400'
              owner: root
              group: root
            /tmp/create-wp-config:
              content: !Join 
                - ''
                - - |
                    #!/bin/bash -xe
                  - >
                    cp /var/www/html/wordpress/wp-config-sample.php
                    /var/www/html/wordpress/wp-config.php
                  - sed -i "s/'database_name_here'/'
                  - !Ref DBName
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'username_here'/'
                  - !Ref DBUser
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'password_here'/'
                  - !Ref DBPassword
                  - |
                    '/g" wp-config.php
              mode: '000500'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              mariadb:
                enabled: 'true'
                ensureRunning: 'true'
        configure_wordpress:
          commands:
            01_set_mysql_root_password:
              command: !Join 
                - ''
                - - mysqladmin -uroot password '
                  - !Ref DBRootPassword
                  - ''''
              test: !Join 
                - ''
                - - '$(mysql '
                  - !Ref DBName
                  - ' -uroot --password='''
                  - !Ref DBRootPassword
                  - ''' >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
            02_create_database:
              command: !Join 
                - ''
                - - mysql -uroot --password='
                  - !Ref DBRootPassword
                  - ''' < /tmp/setup.mysql'
              test: !Join 
                - ''
                - - '$(mysql '
                  - !Ref DBName
                  - ' -u root --password='''
                  - !Ref DBRootPassword
                  - ''' >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
            03_configure_wordpress:
              command: /tmp/create-wp-config
              cwd: /var/www/html/wordpress
    Properties:
      ImageId: !Ref ImageId
      InstanceType: t2.micro
      SubnetId: !Ref PublicAdminSubnet
      SecurityGroupIds:
         - !GetAtt AdminServerGroup.GroupId
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash
           yum update -y
           amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
           yum install -y httpd mariadb-server MariaDB-client
           systemctl start httpd
           systemctl enable httpd
           usermod -a -G apache ec2-user
           chown -R ec2-user:apache /var/www
           chmod 2775 /var/www
           find /var/www -type d -exec sudo chmod 2775 {} \;
           find /var/www -type f -exec sudo chmod 0664 {} \;
           echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php
                       
            # Get the latest CloudFormation helper scripts
            yum update -y aws-cfn-bootstrap
            
            # Start cfn-init
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServer --configsets wordpress_install --region ${AWS::Region}
            
            # cfn-init completed so signal success or not
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServer --region ${AWS::Region}

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
 # Lamda function 
  AMICreationLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          def handler(event, context):
              ec2 = boto3.client('ec2')
              ssm = boto3.client('ssm')
              try:
                  instance_id = event['ResourceProperties']['InstanceId']
                  ami_response = ec2.create_image(
                      InstanceId=instance_id,
                      Name='AutoGeneratedAMI',
                      NoReboot=True,
                      Description='AMI generated by Lambda'
                  )
                  ami_id = ami_response['ImageId']
                  ssm.put_parameter(
                      Name='MyAmiId',  # Ensure this matches the name in your CF template
                      Value=ami_id,
                      Overwrite=True,
                      Type='String'
                  )
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {'AMIId': ami_id})
              except Exception as e:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Data': str(e)})
    Description: Creating custom image of WebServer
    DependsOn: LambdaExecutionRole
  #This parameter stores the ID of the Amazon Machine Image (AMI) created by the Lambda function for deploying EC2 instances.
  AmiIdParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: 'MyAmiId'
      Type: 'String'
      Value: 'pending'  # Initial value, will be updated by Lambda
  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ec2:CreateImage'
                  - 'ssm:PutParameter'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

 # Custom Resource to trigger Lambda
  AMICreationCustomResource:
    Type: 'Custom::AMIcreation'
    Properties:
      ServiceToken: !GetAtt AMICreationLambdaFunction.Arn
    DependsOn: WebServer

Outputs:

  WebsiteURL:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebServer
          - PublicDnsName
        - /wordpress
    Description: WordPress Website

  AMIID:
    Description: "ID of the AMI created by the Lambda function. Use this ID as a parameter when creating subsequent stacks."
    Value: !Ref AmiIdParameter
  
  AZ1Public1SGId:
    Description: "ID of Security Group for AZ1 Public Subnet 1"
    Value: !GetAtt AZ1Public1SG.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-AZ1Public1SGId"

  AZ1Public2SGId:
    Description: "ID of Security Group for AZ1 Public Subnet 2"
    Value: !GetAtt AZ1Public2SG.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-AZ1Public2SGId"

  AZ1Private1SGId:
    Description: "ID of Security Group for AZ1 Private Subnet 1"
    Value: !GetAtt AZ1Private1SG.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-AZ1Private1SGId"

  AZ1Private2SGId:
    Description: "ID of Security Group for AZ1 Private Subnet 2"
    Value: !GetAtt AZ1Private2SG.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-AZ1Private2SGId"
  AZ2Public1SGId:
    Description: "ID of Security Group for AZ2 Public Subnet 1"
    Value: !Ref AZ2Public1SG
    Condition: CreateTwoAdditionalSGs

  AZ2Public2SGId:
    Description: "ID of Security Group for AZ2 Public Subnet 2"
    Value: !Ref AZ2Public2SG
    Condition: CreateFourAdditionalSGs


  AZ2Private1SGId:
    Description: "ID of Security Group for AZ2 Private Subnet 1"
    Value: !Ref AZ2Private1SG
    Condition: CreateTwoAdditionalSGs


  AZ2Private2SGId:
    Description: "ID of Security Group for AZ2 Private Subnet 2"
    Value: !Ref AZ2Private2SG
    Condition: CreateFourAdditionalSGs
